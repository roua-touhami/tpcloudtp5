c'st la frontend de mon projet iot premierment je veux organiser toutes les pages avec ces css et deuxiement je veux que ajouter un bouton "ajouter un patient" a la page dashboard et lorsque je click sur un nom de patient dans la page dashboard je veux que redirecte vers la page patientDetails qui affiche dans cette page les details de cette patient sous forme des courbe a visualiser from les données taken from the data base MongoDB :

projet iot/client/src/components : 
AddPatient.jsx : 
import React, { useState } from 'react';

function AddPatient() {
  const [nom, setNom] = useState('');
  const [prenom, setPrenom] = useState('');
  const [age, setAge] = useState('');
  const [sexe, setSexe] = useState('M');

  const handleAddPatient = async () => {
    const response = await fetch('http://localhost:5000/api/patients', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nom, prenom, age: parseInt(age, 10), sexe }),
    });
    const data = await response.json();
    if (data.success) {
      alert('Patient ajouté avec succès');
    } else {
      alert('Erreur lors de l\'ajout du patient');
    }
  };

  return (
    <div>
      <h2>Ajouter un Patient</h2>
      <input
        type="text"
        placeholder="Nom"
        value={nom}
        onChange={(e) => setNom(e.target.value)}
      />
      <input
        type="text"
        placeholder="Prénom"
        value={prenom}
        onChange={(e) => setPrenom(e.target.value)}
      />
      <input
        type="number"
        placeholder="Âge"
        value={age}
        onChange={(e) => setAge(e.target.value)}
      />
      <select value={sexe} onChange={(e) => setSexe(e.target.value)}>
        <option value="M">Homme</option>
        <option value="F">Femme</option>
      </select>
      <button onClick={handleAddPatient}>Ajouter</button>
    </div>
  );
}

export default AddPatient;

Alerts.jsx : 
import React, { useState, useEffect } from 'react';

function Alerts() {
  const [alerts, setAlerts] = useState([]);

  useEffect(() => {
    fetch('http://localhost:5000/api/alerts')
      .then((response) => response.json())
      .then((data) => setAlerts(data));
  }, []);

  const resolveAlert = async (id) => {
    const response = await fetch(`http://localhost:5000/api/alerts/${id}`, {
      method: 'PATCH',
    });
    if (response.ok) {
      alert('Alerte résolue');
      setAlerts(alerts.filter((alert) => alert._id !== id));
    }
  };

  return (
    <div>
      <h2>Alertes</h2>
      <ul>
        {alerts.map((alert) => (
          <li key={alert._id}>
            {alert.type_alerte} pour le patient {alert.patient_id} à {alert.date_alerte}.
            <button onClick={() => resolveAlert(alert._id)}>Marquer comme résolue</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Alerts;

ClientVitals.jsx : 
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

function ClientVitals() {
  const { id } = useParams(); // Récupère l'ID du client depuis l'URL
  const [vitals, setVitals] = useState([]);

  useEffect(() => {
    fetch(`http://localhost:5000/api/vitals/${id}`)
      .then((response) => response.json())
      .then((data) => setVitals(data));
  }, [id]);

  return (
    <div>
      <h2>Mes Données Vitales</h2>
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Fréquence Cardiaque</th>
            <th>Température</th>
            <th>Saturation O2</th>
          </tr>
        </thead>
        <tbody>
          {vitals.map((vital) => (
            <tr key={vital._id}>
              <td>{new Date(vital.date_mesure).toLocaleString()}</td>
              <td>{vital.frequence_cardiaque} bpm</td>
              <td>{vital.temperature} °C</td>
              <td>{vital.spo2} %</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ClientVitals;

Dashboard.jsx : 
import React, { useEffect, useState } from 'react';

function Dashboard() {
  const [patients, setPatients] = useState([]);

  useEffect(() => {
    fetch('http://localhost:5000/api/patients')
      .then((response) => response.json())
      .then((data) => setPatients(data));
  }, []);

  return (
    <div>
      <h1>Liste des Patients</h1>
      <ul>
        {patients.map((patient) => (
          <li key={patient._id}>
            {patient.nom} {patient.prenom}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Dashboard;

LoginPage.jsx : 
import React, { useState } from 'react';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, mot_de_passe: password }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        alert('Connexion réussie !');
        // Redirigez vers le tableau de bord ou autre page
        window.location.href = '/dashboard';
      } else {
        alert(data.message || 'Erreur de connexion');
      }
    } catch (error) {
      alert('Erreur lors de la connexion au serveur');
    }
  };

  return (
    <div>
      <h2>Connexion</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Mot de passe"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleLogin}>Se connecter</button>
    </div>
  );
}

export default LoginPage;

PatientDetails.jsx : 
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';

function PatientDetails() {
  const { id } = useParams(); // Récupère l'ID du patient depuis l'URL
  const [patient, setPatient] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:5000/api/patients/${id}`)
      .then((response) => response.json())
      .then((data) => setPatient(data));
  }, [id]);

  if (!patient) return <p>Chargement des données...</p>;

  return (
    <div>
      <h2>Détails du Patient</h2>
      <p><strong>Nom :</strong> {patient.nom}</p>
      <p><strong>Prénom :</strong> {patient.prenom}</p>
      <p><strong>Âge :</strong> {patient.age}</p>
      <p><strong>Sexe :</strong> {patient.sexe}</p>
    </div>
  );
}

export default PatientDetails;

RegisterDotor.jsx : 
import React, { useState } from 'react';

function RegisterDoctor() {
  const [nom, setNom] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleRegister = async () => {
    const response = await fetch('http://localhost:5000/api/register-doctor', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nom, email, password }),
    });
    const data = await response.json();
    if (data.success) {
      alert('Médecin enregistré avec succès');
    } else {
      alert('Erreur lors de l\'enregistrement');
    }
  };

  return (
    <div>
      <h2>Inscription Médecin</h2>
      <input
        type="text"
        placeholder="Nom complet"
        value={nom}
        onChange={(e) => setNom(e.target.value)}
      />
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Mot de passe"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleRegister}>S'inscrire</button>
    </div>
  );
}

export default RegisterDoctor;


projet iot/client/src : 
App.css : 
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

App.js : 
import logo from './logo.svg';
import './App.css';

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import LoginPage from './components/LoginPage';
import Dashboard from './components/Dashboard';
import PatientDetails from './components/PatientDetails';
import AddPatient from './components/AddPatient';
import Alerts from './components/Alerts';
import RegisterDoctor from './components/RegisterDoctor';
import ClientVitals from './components/ClientVitals';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<LoginPage />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/patient/:id" element={<PatientDetails />} />
        <Route path="/add-patients" element={<AddPatient />} />
        <Route path="/alerts" element={<Alerts />} />
        <Route path="/register-doctor" element={<RegisterDoctor />} />
        <Route path="/client-vitals/:id" element={<ClientVitals />} />
      </Routes>
    </Router>
    
  );
}

export default App;


/*function App() {
  return <h1>Bienvenue sur la plateforme de surveillance médicale</h1>;
}
export default App;*/

App.jsx : 
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import LoginPage from './components/LoginPage';
import Dashboard from './components/Dashboard';
import PatientDetails from './components/PatientDetails';
import AddPatient from './components/AddPatient';
import Alerts from './components/Alerts';
import RegisterDoctor from './components/RegisterDoctor';
import ClientVitals from './components/ClientVitals';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<LoginPage />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/patient/:id" element={<PatientDetails />} />
        <Route path="/add-patient" element={<AddPatient />} />
        <Route path="/alerts" element={<Alerts />} />
        <Route path="/register-doctor" element={<RegisterDoctor />} />
        <Route path="/client-vitals/:id" element={<ClientVitals />} />
      </Routes>
    </Router>
    
  );
}

export default App;

App.test.js : 
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


index.css : 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

index.js : 
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

